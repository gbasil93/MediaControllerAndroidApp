# DEBUGGING CHANGES
# - button enhanced
# - io port read

# ------------------------------------- #
# variables
# ------------------------------------- #
const FIRMWARE_VERSION() = "2.0.0"

dim mac_addr(6)
dim device_name(20)
dim button_var(3)
dim button_map
dim button_status_state
dim pairing_led_state
dim connected
dim current_bond
dim button_held_down
dim recording
dim multipress_enable_mask
dim connection_latency
dim conn_handle
dim recording_ack(1)

dim batresult
dim batconn_handle
dim battery_value(1)

dim timer_cnt
dim pairing_press_cnt
dim pairing_cnt
dim status_recording_connected_cnt
dim status_not_recording_connected_cnt
dim status_not_connected_cnt
dim status_timer_cnt
dim long_press_cnt
dim multipress_timeout_cnt
dim too_long_cnt
dim current_multipress_count

dim long_press_window
dim long_press_window_time
dim last_key_down_ts
dim multipress_window
dim multipress_window_time
dim current_multipress_button
dim current_mutlipress_count
dim multipress_running

dim command
dim dfu_pointer

dim num_bonds
dim bond_handles(8)
dim bond_index
dim disconnection_reason

dim adv_data(11)

const REPEATING_TIMER_HANDLE = 0
const BUTTON_KEY_DOWN = 1
const BUTTON_KEY_UP = 2
const BUTTON_MULTIPRESS = 3
const BUTTON_LONGPRESS = 4
const PAIRING_PRESS_TIME = 50
const PAIRING_DURATION = 600
const TOO_LONG_THRESHOLD = 170

const PAIRING_BUTTON_MAP = $0C
const STATUS_BUTTON_MAP = $02
const PS_KEY_MULTIPRESS_MASK = $8001
const PS_KEY_LATENCY = $8000

const OTA_COMMAND_RESET_DFU_POINTER = 2
const OTA_COMMAND_BOOT_TO_DFU = 3

const CONNECTION_STATUS_CONNECTED = $05
const CONNECTION_STATUS_BONDED_ENCRYPTED = $02

# TEMP VARIABLES BECAUSE I DON'T WANT TO SET UP GATT YET
const LONG_PRESS_WINDOW_TIME_DEFAULT = 10
const MULTIPRESS_WINDOW_TIME_DEFAULT = 5

# ------------------------------------- #
# user defined procedures
# ------------------------------------- #

# initialize global cariables and timer counts
procedure initialize_variables()
	timer_cnt = 0
	pairing_press_cnt = 0
	pairing_cnt = 0
	status_recording_connected_cnt = 0
	status_not_recording_connected_cnt = 0
	status_not_connected_cnt = 0
	status_timer_cnt = 0
	long_press_cnt = 0
	multipress_timeout_cnt = 0
	too_long_cnt = 0
	pairing_led_state = 0
	connected = 0
    bond_index = 0
	multipress_window = $4000
	long_press_window = $4000
	multipress_enable_mask = $20
end

# set device display name for scanning
procedure setup_device_name()
	call system_address_get()(mac_addr(0:6))

	device_name(0:16) = "BodyWorn Remote "
	device_name(16:1) = (mac_addr(1:1) / $10) + 48 + ((mac_addr(1:1) / $10) / 10 * 7)
	device_name(17:1) = (mac_addr(1:1) & $f) + 48 + ((mac_addr(1:1) & $f) / 10 * 7)
	device_name(18:1) = (mac_addr(0:1) / $10) + 48 + ((mac_addr(0:1) / $10) / 10 * 7)
	device_name(19:1) = (mac_addr(0:1) & $f) + 48 + ((mac_addr(0:1) & $f) / 10 * 7)

	call attributes_write(c_device_name, 0, 20, device_name(0:20))
end

# enable LED IOs as outputs
procedure setup_leds()
	call hardware_io_port_config_direction(0, $C0)
	call hardware_io_port_write(0, $C0, 0)
end

# enable button IOs as inputs
procedure setup_buttons()
	call hardware_io_port_config_irq(0, $3F, 1)
	call hardware_io_port_config_irq(1, $3F, 0)
end

# set green led on (enable = 1) or off (enable = 0)
procedure set_green_led(enable)
	if enable = 1
		call hardware_io_port_write(0, $40, $40)
	else
		call hardware_io_port_write(0, $40, 0)
	end if
end

# set red led on (enable = 1) or off (enable = 1)
procedure set_red_led(enable)
	if enable = 1
		call hardware_io_port_write(0, $80, $80)
	else
		call hardware_io_port_write(0, $80, 0)
	end if
end

# update stored bonding information
procedure update_bonding_information()
    call sm_get_bonds()(num_bonds)
    call attributes_write(c_num_bonded_devices, 0, 1, num_bonds)
end

# debug information
procedure build_advertisement()
    # flags for discoverable/connectable
    adv_data(0:1) = $02 # ad field length = 2 bytes
    adv_data(1:1) = gap_ad_type_flags   # ad field type = 0x01 (Flags)
    adv_data(2:1) = $06 # flags = 0x06, connectable/undirected

    # tx power field advertisement, iOS apps may need this v
    adv_data(3:1) = $02 # ad field length = 2 bytes
    adv_data(4:1) = gap_ad_type_txpower    # ad field type = 0x0A (TX Power)
    adv_data(5:1) = $03 # TX power in dBm

    # custom manufacturer
    adv_data(6:1) = $0D # ad field length = length of payload + 3
    adv_data(7:1) = $ff # ad field type = 0xFF (Manufacturer Specific Data)
    adv_data(8:1) = $ff # unknown/prototype
    adv_data(9:1) = $ff # unknown/prototype

    # set debug info
    adv_data(10:1) = num_bonds
    adv_data(11:8) = bond_handles(0:8)
    adv_data(19:1) = disconnection_reason

    # set custom advertisement data
    call gap_set_adv_data(0, 20, adv_data(0:20))

end

# write the current button value & action to the proper GATT characteristic
procedure write_button_value_enhanced(button_value, button_state)
	button_var(0:1) = button_value
	button_var(1:1) = batresult
	button_var(2:1) = button_state
	call attributes_write(c_button_status_enhanced, 0, 3, button_var(0:3))
end

# write the current button value to the proper GATT characteristic
procedure write_button_value(button_value)
    button_var(0:1) = button_value
    button_var(1:1) = $00
    call attributes_write(c_button_status, 0, 2, button_var(0:2))
end

# setup the repeating timer for an interval of 100 ms
procedure setup_clock()
	call hardware_set_soft_timer($CCC, REPEATING_TIMER_HANDLE, 0)
end

# update connection latency value
procedure update_connection_latency()
    call connection_update(conn_handle, 40, 40, connection_latency, 1400)
end
    

# show LED status
procedure show_led_status()
    if connected > 0 then
        if recording = 1 then
            call set_red_led(1)
            status_recording_connected_cnt = 1
        else
            call set_green_led(1)
            status_not_recording_connected_cnt = 1
        end if
    else
        call set_green_led(1)
        status_not_connected_cnt = 1
    end if
end

# checks if the pairing buttons have been held down long enough to start pairing procedure
procedure handle_pairing_press_cnt()
	if pairing_press_cnt > PAIRING_PRESS_TIME
		call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
		call gap_set_adv_parameters($80, $80, 7)
		call sm_set_bondable_mode(1)
		pairing_press_cnt = 0
		pairing_cnt = 1
	else
		pairing_press_cnt = pairing_press_cnt + 1
	end if
end

# checks how long device has been in pairing mode, stops it if necessary
# toggles pairing LEDs (christmas lights)
procedure handle_pairing()
	if pairing_cnt > PAIRING_DURATION
		pairing_cnt = 0
		call gap_set_mode(gap_non_discoverable, gap_non_connectable)
		call gap_set_adv_parameters($800, $800, 7)
		call set_green_led(0)
		call set_red_led(0)
	else 
		if pairing_led_state = 0
			call set_green_led(1)
			call set_red_led(0)
			pairing_led_state = 1
		else
			call set_green_led(0)
			call set_red_led(1)
			pairing_led_state = 0
		end if
		pairing_cnt = pairing_cnt + 1
	end if
end

# show status light if device is connected and recording (long red)
procedure handle_status_recording_connected()
    if status_recording_connected_cnt = 5
        call set_red_led(0)
        status_recording_connected_cnt = 0
    else
        status_recording_connected_cnt = status_recording_connected_cnt + 1
    end if
end

# show status light if device is connected but not recording (long green)
procedure handle_status_not_recording_connected()
    if status_not_recording_connected_cnt = 5
        call set_green_led(0)
        status_not_recording_connected_cnt = 0
    else
        status_not_recording_connected_cnt = status_not_recording_connected_cnt + 1
    end if
end

# show status light if device is not connected (multiple short blinks)
procedure handle_status_not_connected()
    if status_not_connected_cnt = 1
        call set_green_led(0)
    end if
    if status_not_connected_cnt = 2
        call set_green_led(1)
    end if
    if status_not_connected_cnt = 3
        call set_green_led(0)
    end if
    if status_not_connected_cnt = 4
        call set_green_led(1)
    end if
    if status_not_connected_cnt = 5
        call set_green_led(0)
    end if
    if status_not_connected_cnt = 6
        call set_green_led(1)
    end if
    if status_not_connected_cnt = 7
        call set_green_led(0)
    end if
    if status_not_connected_cnt = 8
        call set_green_led(1)
    end if
    if status_not_connected_cnt = 9
        call set_green_led(0)
    end if

    status_not_connected_cnt = status_not_connected_cnt + 1

    if status_not_connected_cnt > 9
        status_not_connected_cnt = 0
    end if
end

# timeout to delay status light
procedure handle_status_timer()
    if status_timer_cnt = 3
        call show_led_status()
        status_timer_cnt = 0
    else
        status_timer_cnt = status_timer_cnt + 1
    end if
end

# handle long press event
procedure handle_long_press()
    if long_press_cnt = LONG_PRESS_WINDOW_TIME_DEFAULT
        call write_button_value_enhanced(button_map, BUTTON_LONGPRESS)

        # Check if the current button(s) trigger status indicator
        if button_map = STATUS_BUTTON_MAP
            status_timer_cnt = 1
        end if
        long_press_cnt = 0
    else
        long_press_cnt = long_press_cnt + 1
    end if
end

# if a button is held for long enough, tristate it to save power from pull resistor being definite state
procedure handle_too_long_button()
    # enable pull on port 0
    call hardware_io_port_config_pull(0, $00, 1)
    # check button states
    call hardware_io_port_read(0, $ff)(button_status_result, button_status_port, button_status_state)
    button_map = (button_status_state ^ $ff) & $3f
    # set tristate enable for any buttons not currently down
    call hardware_io_port_config_pull(0, button_map, 1)
    # if all buttons are released, kill the flag
    if button_map = $00
        button_held_down = 0
    end if
    too_long_cnt = 0
end

# determine if multipress has occurred within timeout limit
procedure handle_multipress_timeout()
    if multipress_timeout_cnt = MULTIPRESS_WINDOW_TIME_DEFAULT + 1
        call write_button_value_enhanced(current_multipress_button, BUTTON_KEY_UP)
        current_multipress_count = 0
    end if
end

# handle button being pressed too long to save battery
procedure handle_too_long_cnt()
    if button_map != $00 then
      button_held_down = 1
    end if
end

# handle ota control gatt characteristic being written
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device

    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0
        # Unknown command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4
        	# Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = OTA_COMMAND_BOOT_TO_DFU
                call system_reset(1)
            else
            	if command = OTA_COMMAND_RESET_DFU_POINTER
                    dfu_pointer = 0
            	else
            		# Other commands are not used, but still accepted in order
                	# to be compatible with the external flash OTA
                	# implementation
                	call attributes_user_write_response(connection, $0)
            	end if

            end if
        end if
    end if
end

# ------------------------------------- #
# interrupt events
# ------------------------------------- #

# 100 ms repeating timer event
event hardware_soft_timer(handle)
    if status_recording_connected_cnt > 0
        call handle_status_recording_connected()
    end if

    if status_not_recording_connected_cnt > 0
        call handle_status_not_recording_connected()
    end if

    if status_not_connected_cnt > 0
        call handle_status_not_connected()
    end if

    if status_timer_cnt > 0
        call handle_status_timer()
    end if

    if long_press_cnt > 0
        call handle_long_press()
    end if

	if pairing_cnt > 0
		call handle_pairing()
	end if

    if multipress_timeout_cnt > 0
        call handle_multipress_timeout()
    end if

    if pairing_press_cnt > 0
        call handle_pairing_press_cnt()
    end if

    if too_long_cnt > TOO_LONG_THRESHOLD
        call handle_too_long_cnt()
    end if

    if button_held_down = 1
        call handle_too_long_button()
    end if

    call update_bonding_information()
    call build_advertisement()
end

# interrupt for a gatt characteristic write
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    # recording status updated
    if handle = c_rec_status
        recording = value_data(0:1)
        recording_ack(0:1) = recording
        call attributes_write(c_rec_status_ack, 0, 1, recording_ack(0:1))
    end if

    # long press duration updated
    if handle = c_longpress_duration
        long_press_window = (value_data(0:1) << 8) | value_data(1:1)
        long_press_window_time = (long_press_window * 10) / 32768
    end if

    # multipress mask updated
    if handle = c_multipress_enable
        multipress_enable_mask = value_data(0:1)
        call flash_ps_save(PS_KEY_MULTIPRESS_MASK, 1, value_data(0:1))
    end if

    # multipress timeout updated
    if handle = c_multipress_timeout
        multipress_window = (value_data(0:1) << 8) | value_data(1:1)
        multipress_window_time = (multipress_window * 10) / 32768
    end if

    # connection latency value updated
    if handle = c_conn_latency_value
        connection_latency = value_data(0:1)
        if connection_latency > 250
            connection_latency = 250
        end if
        call flash_ps_save(PS_KEY_LATENCY, 1, connection_latency)
        call update_connection_latency()
    end if

    # ota control value updated
    if handle = xgatt_ota_control || handle = xgatt_ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # ota data value updated
    if handle = xgatt_ota_data || handle = xgatt_ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end

# adc read result event
event hardware_adc_result(input,value)
	batresult = (value - 17616) * 100 / (26426 - 17616)
	if batresult > 100 then
		batresult = 100
	end if
	if batresult < 0 then
	    batresult = 0
	end if
	battery_value(0:1) = batresult
	if batconn_handle < $ff then
		call attributes_user_read_response(batconn_handle, 0, 1, battery_value(0:1))
		batconn_handle = $ff
	end if
end

# gatt characteristic read request event
event attributes_user_read_request(connection, handle, offset, maxsize)
	batconn_handle = connection
	call hardware_adc_read(15,3,0)
end

# input IO (button) change event
event hardware_io_port_status(timestamp, port, irq, state)
    call write_button_value(state)
    if(state & irq) = 0    
        # button down
        button_map = (state ^ $FF) & $3F
        call write_button_value_enhanced(button_map, BUTTON_KEY_DOWN)
        #too_long_cnt = 1
        last_key_down_ts = timestamp
        long_press_cnt = 1
        if button_map = PAIRING_BUTTON_MAP
            pairing_press_cnt = 1
        end if
        if multipress_running > 0
            multipress_timeout_cnt = 0
            multipress_running = 0
            if button_map != current_multipress_button
                call write_button_value_enhanced(current_multipress_button, BUTTON_KEY_UP)
            end if
        end if
    else
        # button up
        call write_button_value_enhanced(button_map, BUTTON_KEY_UP)
        pairing_press_cnt = 0
        #too_long_cnt = 0
        if (timestamp - last_key_down_ts) < long_press_window
            long_press_cnt = 0
            if button_map = STATUS_BUTTON_MAP
                status_timer_cnt = 1
            end if
        end if
        if irq & multipress_enable_mask
            if button_map != current_multipress_button
                current_multipress_count = 0
            end if
            current_multipress_button = button_map
            current_multipress_count = current_multipress_count + 1
            if current_multipress_count > 2
                call write_button_value_enhanced(button_map, BUTTON_MULTIPRESS)
                current_mutlipress_count = 0
            else
                multipress_timeout_cnt = 1
                multipress_running = 1
            end if
        end if
    end if
    call hardware_adc_read(15,3,0)
end

# connection event
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    if (flags & CONNECTION_STATUS_CONNECTED) = CONNECTION_STATUS_CONNECTED
        connected = connected | 1
        if bonding < $ff
            current_bond = bonding
        end if
    end if

    if (flags & CONNECTION_STATUS_BONDED_ENCRYPTED) = CONNECTION_STATUS_BONDED_ENCRYPTED
        connected = connected | 2
        status_timer_cnt = 1
        if bonding < $ff
            current_bond = bonding
        end if
    else
        if bonding = $ff
            call sm_encrypt_start(connection, 1)
        else
            connected = connected | 4
        end if
    end if

    call attributes_write(c_connection_flags, 0, 1, connected)

    # make sure to stop the pairing counter from running off the rails
	if pairing_cnt > 0
		pairing_cnt = 0
		call set_green_led(0)
		call set_red_led(0)
	end if
end

# disconnection event
event connection_disconnected(connection, reason)
	connected = 0
    disconnection_reason = reason
	call gap_set_mode(gap_non_discoverable, gap_directed_connectable)
	call initialize_variables()
	call show_led_status()
end

# boot (main function)
event system_boot(major, minor, patch, build, ll_version, protocol, hw)
	call initialize_variables()
	call setup_device_name()
	call setup_leds()
	call setup_buttons()
	call setup_clock()
	call attributes_write(c_firmware_version, 0, 5, FIRMWARE_VERSION(0:5))
	call gap_set_adv_parameters($800, $800, 7)
	call gap_set_mode(gap_non_discoverable, gap_directed_connectable)
	call sm_set_bondable_mode(1)
end