const PS_KEY_LATENCY = $8000
const MAX_ERASE_PAGE = 64
const PAIRING_TIMER_FREQUENCY = 8000 # 1/4 second

const BUTTON_KEY_DOWN = 1
const BUTTON_KEY_UP = 2

#temporary variables
dim button_tmp(3)
dim tmp(1)
dim iterator

# configuration values
dim return_value
dim len

#device values
dim version(5)
dim mac_addr(6)
dim name(20)
dim latency_value

#battery handle and field
dim batconn_handle
dim batresult

#connection handle
dim conn_handle

#bond handle
dim current_bond_handle

#state variables
dim connected
dim recording
dim pairing
dim button_status
dim slow_connection


#Events 
const PAIRING_MODE_START = 1
const LEDS_OFF = 2
const LED_ON_GREEN = 3
const LED_ON_RED = 4
const LED_ON_ORANGE = 5
const PAIRING = 6

# led variables
dim turn_led_off

# pairing variables
dim last_pair_key_down_ts
dim seconds_pairing

# dfu
dim command # command that was passed in
dim dfu_pointer  # current pointer to flash location to upload firmware

# -------------------------------
# Configure Device Name
# -------------------------------
procedure setup_device_name()
    #Get local BT address
    call system_address_get()(mac_addr(0:6))

    # Update the device_name to include the last 4 digits of the mac address
    
    name(19:1) = (mac_addr(0:1)&$f) + 48 + ((mac_addr(0:1)&$f )/10*7)
    name(18:1) = (mac_addr(0:1)/$10)+ 48 + ((mac_addr(0:1)/$10)/10*7)
    name(17:1) = (mac_addr(1:1)&$f) + 48 + ((mac_addr(1:1)&$f )/10*7)
    name(16:1) = (mac_addr(1:1)/$10) + 48 + ((mac_addr(1:1)/$10)/10*7)

    name(0:16) = "BodyWorn Remote "
    call attributes_write(c_device_name, 0, 20, name(0:20))
end

# -------------------------------
# Configure Firmware Version
# -------------------------------
procedure setup_firmware_version()
    version(0:5) = "1.2.4"
    call attributes_write(c_firmware_version, 0, 5, version(0:5))
end

# -------------------------------
# Setup LED
# -------------------------------
procedure setup_led()
	# Configure port 0.6, 0.7 as output
	call hardware_io_port_config_direction(0, $C0)

    # Write 0 so they are initially off
	call hardware_io_port_write(0, $C0, 0)
end


# -------------------------------
# Setup Buttons
# -------------------------------
procedure setup_buttons()
	# enable interrupt on port 0 pins 0-5 rising edge

    # (parameters are port=0, bitmask=0b00111111, edge=falling)
    call hardware_io_port_config_irq(0, $3F, 1)

    # enable interrupt on port 1 pins 0-5 rising
    call hardware_io_port_config_irq(1, $3F, 0)
end


# -------------------------------
# Toggle Recording LED
# -------------------------------
procedure toggle_red_led(enable)
	if enable = 1
		call hardware_io_port_write(0, $80, $80)
	end if
	if enable = 0
		call hardware_io_port_write(0, $80, 0)
	end if
end

# -------------------------------
# Toggle Connection LED
# -------------------------------
procedure toggle_green_led(enable)
    if enable = 1
        call hardware_io_port_write(0, $40, $40)
    end if
    if enable = 0
        call hardware_io_port_write(0, $40, 0)
    end if
end

# -------------------------------
# Toggle Recording LED
# -------------------------------
procedure toggle_orange_led(enable)
    if enable = 1
        call hardware_io_port_write(0, $C0, $C0)
    end if
    if enable = 0
        call hardware_io_port_write(0, $C0, 0)
    end if
end

# -------------------------------
# Load Configurations
# -------------------------------
procedure load_configurations()
    # Load latency value
    call flash_ps_load(PS_KEY_LATENCY)(return_value, len, tmp(0:1))

    # Default the value if the read failed
    if return_value > 0 then
        latency_value = 130
    else
        latency_value = tmp(0:1)
    end if

    call attributes_write(c_conn_latency_value, 0, 1, latency_value)
end

# -------------------------------
# Reset variables
# -------------------------------
procedure reset_variables()
    connected = 0
    recording = 0
    batconn_handle=$ff

    # reset recording gatt characteristic
    call attributes_write(c_rec_status,0,1,0)

    # reset latency and button configurations
    call load_configurations()

end

# -------------------------------
# Process to start pairing
# -------------------------------
procedure start_pairing_mode()
    pairing = 1

    # Speed up the advertising interval during pairing to make it easier to see
    call gap_set_adv_parameters($80, $80, 7)

    # Start advertising discoverable so that masters can connect
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    # set 100ms repeating timer for toggling leds
    #call hardware_set_soft_timer($CCC, PAIRING_TIMER_HANDLE, 0)

    # enable bondable mode
    call sm_set_bondable_mode(1)

end


# -------------------------------
# Stop pairing
# -------------------------------
procedure stop_pairing_mode()
    pairing = 0
    # stop the timer
    #call hardware_set_soft_timer(0, PAIRING_TIMER_HANDLE, 0)
    # turn off the leds
    call toggle_green_led(0)
    call toggle_red_led(0)
    #pairing_time = 0

    # Stop advertising
    call gap_set_mode(gap_non_discoverable, gap_non_connectable)
    
    # Slow the advertising interval now that pairing is done
    call gap_set_adv_parameters($800, $800, 7)
end

# -------------------------------
# Write enhanced button value to GATT
# -------------------------------
procedure write_button_value_enhanced(button_value, button_state)
    
    # put button value in payload
    button_tmp(0:1) = button_value

    # put battery value in payload
    button_tmp(1:1) = batresult

    # put button state in payload
    button_tmp(2:1) = button_state

    # write value to GATT database
    call attributes_write(c_button_status_enhanced,0,3,button_tmp(0:3))
end

# -------------------------------
# Adjust the connection properties for better battery life
# -------------------------------
procedure slow_connection()
    slow_connection = 1
    call connection_update(conn_handle, 40, 40, latency_value, 3000)
end

# -------------------------------
# Adjust the connection properties for better battery life
# -------------------------------
procedure fast_connection()
    call connection_update(conn_handle, 40, 40, 0, 3000)
end

# -------------------------------
# Write recording ack value to GATT
# -------------------------------
procedure write_ack_value()
    # put button value in payload
    tmp(0:1) = recording
    # write value to GATT database
    call attributes_write(c_rec_status_ack,0,1,tmp(0:1))
end

# -------------------------------
# Show LED Status
# -------------------------------
procedure show_led_status()
    if connected = 1 then 
        if recording = 1 then
            call hardware_set_soft_timer($CCC, LED_ON_RED, 1)
        else
            call hardware_set_soft_timer($CCC, LED_ON_GREEN, 1)
        end if    
    else 
        call hardware_set_soft_timer($CCC, LED_ON_ORANGE, 1)
    end if
    
end

# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device

    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0 then
        # Not a valid command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4 then # Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = 3 then 
                # Command 3 received -> Boot to DFU mode, not currently used by Bodyworn
                # The event dfu_boot(version) is not currently being handled 
                # Not sure if we should keep this reset
                call system_reset(1)
            else
                if command = 2 then
                    dfu_pointer = 0
                else
                    # Other commands are not used, but still accepted in order
                    # to be compatible with the external flash OTA
                    # implementation
                    call attributes_user_write_response(connection, $0)
                end if

            end if
        end if
    end if
end


# -------------------------------
# System boot event
# -------------------------------
event system_boot(major, minor, patch, build, ll_version, protocol, hw)

    # Erase internal flash dedicated for OTA
    # For this to work, the script timeout has to be increased from the default
    # value in application configuration file (config.xml)
    iterator = 0

    while iterator < MAX_ERASE_PAGE
        call flash_erase_page(iterator)
        iterator = iterator + 1
    end while

    dfu_pointer = 0
    batconn_handle=$ff

    # use the MAC address to give this device a unique name
    call setup_device_name()

    # Configure LED for output
    call setup_led()

    # Configure Buttons for input
    call setup_buttons()

    # Set advertisement interval to 125ms.
    # Use all three advertisement channels
    # args: min time, max time, channel enables in hex (111)
    call gap_set_adv_parameters($800, $800, 7)

    # Start advertising not discoverable so that previous masters can connect
    call gap_set_mode(gap_non_discoverable, gap_directed_connectable)

    # enable bondable mode
    call sm_set_bondable_mode(1)

    # set firmware version
    call setup_firmware_version()

    # Reset variables
    call reset_variables()

    #call hardware_set_soft_timer($CCC, PAIRING_MODE_START, 1)

end


# -------------------------------
# Disconnect event
# -------------------------------
event connection_disconnected(handle, result)
    # Start advertising not discoverable so that previous masters can connect
    call gap_set_mode(gap_non_discoverable, gap_directed_connectable)
    call reset_variables()
    call show_led_status()
end

# -------------------------------
# Connection event
# -------------------------------
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)

    if bonding = $ff then
        call hardware_set_soft_timer($CCCC, LED_ON_ORANGE, 1)
    end if 

    # Device is connected.
    if pairing = 1 then
        # stop the pairing timer
        call hardware_set_soft_timer(0, PAIRING, 1)

        # get out of pairing mode
        call stop_pairing_mode()

         # delete previous bonds
        call sm_delete_bonding(current_bond_handle)
    
        # Store current bond handle
        current_bond_handle = bonding
    else
        # If not pairing and not bonded, unwanted connection, disconnect
        if bonding = $ff then
            call connection_disconnect(connection)
        end if
    end if

    # If the connection is complete and encrypted, device connected
    if flags & $02 then
        if connected = 0 then
            # default to the slow connection to save battery
            call slow_connection()
            call show_led_status()
            #call start_single_shot_timer($CCC,STATUS_TIMER_HANDLE)
        end if

        # set connection variable for status
        connected = 1
    end if
end

# -------------------------------
# Callback when a button is pressed
# -------------------------------
event hardware_io_port_status(timestamp, port, irq, state)
    # Write the old way of reporting buttons
    #call write_button_value(state)

    # Process buttons the new way
    # If key down
    if port = 0 then        

        # State on key down is every bit is high except for the one that was pressed, the one that is pressed is low
        # so state is 0xff xored with the state (for status it is 0xFD) which = 0x02, and it with $3f 
        # since we only support 6 buttons so if we get a 0xBF ^ 0xFF = (0x40 & 0x3f) = 0 
        # since we do not have a 7th sensor

        button_status = (state ^ $ff) & $3f
        
        if button_status = $0c then
            # if it is the pairing sequence
            last_pair_key_down_ts = timestamp
            call hardware_set_soft_timer(160000, PAIRING_MODE_START, 1)
        end if

        # Write the key down event
        call write_button_value_enhanced(button_status, BUTTON_KEY_DOWN)

        # Check if the current button(s) trigger status indicator
        if button_status = 2 then
            call show_led_status()
        end if

    else
        if button_status = $0c then
            if pairing = 0 then
                call hardware_set_soft_timer(0, PAIRING_MODE_START, 1)
            end if
        end if 

        # uses the previous button status since we do not get a state on key up that can be parsed into a button event
        call write_button_value_enhanced(button_status, BUTTON_KEY_UP)
    end if

    # request a new battery read
    #call hardware_adc_read(15,3,0)

end

# -------------------------------
# Callback when user requests a battery read
# -------------------------------
event attributes_user_read_request(connection, handle, offset, maxsize)
    batconn_handle=connection
    #start measurement, read VDD/3, 9 effective bits
    call hardware_adc_read(15,3,0)
end

# -------------------------------
# Callback when adc is read
# -------------------------------
event hardware_adc_result(input,value)
    #scale value to range 0-100
    #measurement range is 32768=1.15v*3=3.45V
    #new battery ADC measurement is 20912=2.52v
    #minimum battery voltage is 2.0 volts=2.0v/3.45v*32768= 18996
    #20912-18996=1916

    batresult = (value - 17616) * 100 / (26426 - 17616)

    #clip to 100%
    if batresult>100 then
        batresult=100
    end if
    if batresult<0 then
        batresult=0
    end if

    tmp(0:1)=batresult

    if batconn_handle<$ff then
        #if connection handle is valid
        call attributes_user_read_response(batconn_handle,0,1,tmp(0:1))
        batconn_handle=$ff
    end if
end

event hardware_soft_timer(handle)
    turn_led_off = 0
    if handle = LEDS_OFF then
        call toggle_orange_led(0)
    end if 

    if handle = LED_ON_GREEN then
        call toggle_green_led(1)
        turn_led_off = 1
    end if 

    if handle = LED_ON_RED then
        call toggle_red_led(1)
        turn_led_off = 1
    end if

    if handle = LED_ON_ORANGE then
        call toggle_orange_led(1)
        turn_led_off = 1
    end if 

    if turn_led_off = 1 then
        call hardware_set_soft_timer(6552, LEDS_OFF, 1)
    end if

    if handle = PAIRING_MODE_START then
        iterator = 0
        call start_pairing_mode()
        call hardware_set_soft_timer(PAIRING_TIMER_FREQUENCY, PAIRING, 1)
    end if 

    if handle = PAIRING then
        iterator = iterator + 1
        seconds_pairing = ((iterator * PAIRING_TIMER_FREQUENCY)/32000)

        # 32000 cycles in a second, we want to be in piaring mode for ten seconds
        if seconds_pairing > 30 then
            call stop_pairing_mode()
        else 
            # if it is even
            if ((iterator/2) * 2) = iterator then
                call toggle_green_led(1)
                call toggle_red_led(0)
            else
                call toggle_green_led(0)
                call toggle_red_led(1)
            end if 
            call hardware_set_soft_timer(PAIRING_TIMER_FREQUENCY, PAIRING, 1)
        end if
    end if  
end

# Incoming data event listener
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    # Set the recording state for the recording led
    if handle = c_rec_status then
        recording = value_data(0:1)
        call write_ack_value()
    end if


    # Called to change the latency of the slow connection
    if handle = c_conn_latency_value then
        if latency_value != value_data(0:1) then
            latency_value = value_data(0:1)
            if latency_value > 250 then
                latency_value = 250
            end if

            call flash_ps_save(PS_KEY_LATENCY, 1, latency_value)
            # Call slow connection to apply the update
            if slow_connection = 1 then
                call slow_connection()
            end if

        end if
    end if


     # Both ota_control endpoints run the same code, however, the wo_response just ignores most of this
    if handle = xgatt_ota_control || handle = xgatt_ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = xgatt_ota_data || handle = xgatt_ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if

end

event sm_bonding_fail(handle, result)

    # If bonding fails, handle it gracefully based on the following possible results:
    # - 0x018B - Out of bonds (no space left, all 8 bonding slots taken)
    # - 0x0205 - Authentication failure (shouldn't happen with "just works" mode, but might otherwise)
    # - 0x0206 - Pin or key missing (probably local or remote device is missing the key, but not both)
    # - 0x0301 - Passkey entry failed (also shouldn't happen in "just works" mode unless bonding is cancelled)
    # - 0x0302 - OOB data not available (only occurs if OOB is required and not supported on both ends)
    # - 0x0303 - Authentication requirements (I/O capabilities required but not supported)
    # - 0x0304 - Confirm value failed (PIN entry/comparison attempted but failed)
    # - 0x0305 - Pairing not supported (also occurs if bond info removed from remote device but not local module)
    # - 0x0306 - Encryption key size (key size insufficient to meet security requirements)
    # - 0x0307 - Command not supported (SMP command is not supported on this device)
    # - 0x0308 - Unspecified reason (may occur if bond info is present remotely but not locally)
    # - 0x0309 - Repeated attempts (too little time has elapsed since last pairing/security request)
    # - 0x030A - Invalid parameters (bad parameters sent during pairing/bonding process)

    # NOTE: The most common cases:
    # - 0x018B, which means you ran out of space and must remove at least one bond in order to bond again
    # - 0x0206, which typically means the pairing info was removed on the remote device but not locally
    # - 0x0301, which typically means the user cancelled the pairing request or entered the wrong passkey
    # - 0x0305, which is like 0x0206 but is often generated instead if the remote device is a smartphone
    # - 0x0308, which typically means the pairing info was removed on the local device but not remotely
    if result = $018b then
        # Only solved by removing bonds - requires the user to reset the bonds...
        call sm_delete_bonding($ff) # deletes all bonds
        call hardware_set_soft_timer($CCC, LED_ON_RED, 1)
    end if

    if result = $0301 then
        # Usually solved simply by trying again
        # Seems to solve most problems on iOS
        # On Android, pairing rejected a few times if Android deleted pairing without informing device
        call sm_encrypt_start(0, 1)
    end if

    if result = $0305 || result = $0206 then
        # Remove local bonding info first, then the remote device needs to reconnect
        # If current_bond_handle is $ff, that means we don't have a bonding handle - so not much we can do
        if current_bond_handle != $ff then
            call sm_delete_bonding(current_bond_handle)
        end if

        # Sometimes takes a few tries
        call connection_disconnect(0)
    end if

    if result = $0308 then
        # Remove remote bonding info first, then the remote device needs to reconnect
        # Android can recover automatically, iOS cannot
        # Instead of disconnecting, just force a re-encryption... Usually works
        call sm_encrypt_start(0, 1)
    end if
end